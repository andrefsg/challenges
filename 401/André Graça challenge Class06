from cryptography.fernet import Fernet
import os

def generate_key():
    return Fernet.generate_key()

def load_key():
    if os.path.exists("secret.key"):
        return open("secret.key", "rb").read()
    else:
        return generate_key()

def save_key(key):
    with open("secret.key", "wb") as key_file:
        key_file.write(key)

def encrypt_file(file_path, key):
    with open(file_path, "rb") as file:
        data = file.read()

    fernet = Fernet(key)
    encrypted_data = fernet.encrypt(data)

    with open(file_path + ".enc", "wb") as file:
        file.write(encrypted_data)

def decrypt_file(file_path, key):
    with open(file_path, "rb") as file:
        encrypted_data = file.read()

    fernet = Fernet(key)
    
    try:
        decrypted_data = fernet.decrypt(encrypted_data)
        with open(file_path[:-4], "wb") as file:
            file.write(decrypted_data)
    except Exception as e:
        print("Decryption error:", e)

def main():
    mode = int(input("Select mode (1: Encrypt File, 2: Decrypt File): "))

    if mode == 1:
        file_path = input("Enter file path: ")
        key = generate_key()
        encrypt_file(file_path, key)
        save_key(key)
    elif mode == 2:
        file_path = input("Enter file path: ")
        key = load_key()
        decrypt_file(file_path, key)

if __name__ == "__main__":
    main()
