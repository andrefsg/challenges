
import os
from cryptography.fernet import Fernet
import argparse

def generate_key(password):
    key = Fernet.generate_key()
    with open("key.key", "wb") as key_file:
        key_file.write(key)

def load_key():
    return open("key.key", "rb").read()

def encrypt_file(file_path, key):
    with open(file_path, 'rb') as file:
        plaintext = file.read()

    cipher = Fernet(key)
    ciphertext = cipher.encrypt(plaintext)

    with open(file_path + '.enc', 'wb') as file:
        file.write(ciphertext)

def decrypt_file(file_path, key):
    with open(file_path, 'rb') as file:
        ciphertext = file.read()

    cipher = Fernet(key)
    plaintext = cipher.decrypt(ciphertext)

    with open(file_path[:-4], 'wb') as file:
        file.write(plaintext)

def encrypt_folder(folder_path, key):
    for root, _, files in os.walk(folder_path):
        for file in files:
            file_path = os.path.join(root, file)
            encrypt_file(file_path, key)

def decrypt_folder(folder_path, key):
    for root, _, files in os.walk(folder_path):
        for file in files:
            if file.endswith('.enc'):
                file_path = os.path.join(root, file)
                decrypt_file(file_path, key)

def main():
    parser = argparse.ArgumentParser(description='Encrypt or decrypt files/folders.')
    parser.add_argument('action', choices=['encrypt', 'decrypt'], help='Specify whether to encrypt or decrypt.')
    parser.add_argument('path', help='Path to file or folder.')

    args = parser.parse_args()

    password = input("Enter password: ")

    if args.action == 'encrypt':
        generate_key(password)
        key = load_key()
        if os.path.isfile(args.path):
            encrypt_file(args.path, key)
        elif os.path.isdir(args.path):
            encrypt_folder(args.path, key)
    elif args.action == 'decrypt':
        key = load_key()
        if os.path.isfile(args.path):
            decrypt_file(args.path, key)
        elif os.path.isdir(args.path):
            decrypt_folder(args.path, key)

if __name__ == "__main__":
    main()


   
